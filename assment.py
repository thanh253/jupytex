# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dYI4gCf-FhrH17FIf5ukrphUWYUsXXOy
"""

import pandas as pd
import seaborn as sns
import scipy as sp
import statsmodels.api as sm
import numpy as np

boston_url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ST0151EN-SkillsNetwork/labs/boston_housing.csv'
boston_df=pd.read_csv(boston_url)

boston_df.head(10)

The following describes the dataset variables:

· CRIM - per capita crime rate by town

· ZN - proportion of residential land zoned for lots over 25,000 sq.ft.

· INDUS - proportion of non-retail business acres per town.

· CHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)

· NOX - nitric oxides concentration (parts per 10 million)

· RM - average number of rooms per dwelling

· AGE - proportion of owner-occupied units built prior to 1940

· DIS - weighted distances to five Boston employment centres

· RAD - index of accessibility to radial highways

· TAX - full-value property-tax rate per $10,000

· PTRATIO - pupil-teacher ratio by town

· LSTAT - % lower status of the population

· MEDV - Median value of owner-occupied homes in $1000's

# For the "Median value of owner-occupied homes" provide a boxplot
sns.boxplot(boston_df['MEDV'])

# Provide a bar plot for the Charles river variable
sns.barplot(boston_df['CHAS'])

# Provide a boxplot for the MEDV variable vs the AGE variable.
# (Discretize the age variable into three groups of 35 years and younger,
# between 35 and 70 years and 70 years and older)
# medv = boston_df[]
boston_df.loc[(boston_df['AGE'] <= 35), 'age_group'] = '35 years and younger'
boston_df.loc[(boston_df['AGE'] > 35) & (boston_df['AGE'] < 70), 'age_group'] = 'between 35 and 70 years'
boston_df.loc[(boston_df['AGE'] >= 70), 'age_group'] = '70 years and older'

sns.boxplot(x=boston_df.MEDV, y=boston_df.age_group, data=boston_df)

# Provide a scatter plot to show the relationship between Nitric oxide
# concentrations and the proportion of non-retail business acres per
# town. What can you say about the relationship?

# ANSWER: It seems that low concentrations of Nitric oxide is
# associated with low values of INDUS

sns.scatterplot(x=boston_df['NOX'], y=boston_df['INDUS'])

# Create a histogram for the pupil to teacher ratio variable
sns.histplot(boston_df['PTRATIO'])

# HYPOTHESIS
# H0 = There is no significant difference in median value of homes bounded by the Charles river.
# since pvalue < 0.05 we fail to reject the null hypothesis.
# H1 = There is a significante difference in the median value

sp.stats.ttest_ind(
    boston_df[boston_df['CHAS'] == 0]['MEDV'],
    boston_df[boston_df['CHAS'] == 1]['MEDV'],
    equal_var=True
)

# CONCLUSION
# Since the p-value is less than alpha value of 0.05, we failed to
# reject null hypothesis since there is NO statistical significance.

# HYPOTHESIS
# H0 = the three population means are equal
# H1 = At least one of the means differ

sp.stats.f_oneway(
    boston_df[boston_df["age_group"] == '35 years and younger']["MEDV"],
    boston_df[boston_df["age_group"] == '70 years and older']["MEDV"],
    boston_df[boston_df["age_group"] == 'between 35 and 70 years']["MEDV"],
    axis=0
)

# CONCLUSION
# Since p-value is less than the alpha value of 0.05, we reject
# the null hypothesis since there is NO statistical significance.

# HYPOTHESIS
# H0 = NOX is not correlated with INDUS
# H1 = NOX is correlated with INDUS

sp.stats.pearsonr(boston_df["NOX"],boston_df["INDUS"])

# CONCLUSION
# Since the p-value is less than 0.05, we reject the Null hypothesis
# and conclude that there exists a relationship between Nitric Oxide
# and non-retail business acres per town.

# HYPOTHESIS
# H0: weighted distances to five Boston employment centres are not related to median value
# H1: weighted distances to five Boston employment centres are related to median value

y = boston_df['MEDV']
x = boston_df['DIS']

x = sm.add_constant(x)

results = sm.OLS(y,x).fit()

results.summary()

np.sqrt(0.062)  ##Pearson Coeffiecent valuea

# CONCLUSION
# The square root of R-squared is 0.25, which implies weak correlation between both features